# Generated by Chef. Local modifications will be overwritten.

#--------------------------------------------------------
# To use an environment variable, use the following syntax :  ${env:NAME_OF_ENV_VARIABLE}
# For example :
#   sonar.jdbc.url: ${env:SONAR_JDBC_URL}
#
#
# See also the file conf/wrapper.conf for JVM advanced settings
#---------------------------------------------------------


#---------------------------------------------------------
# WEB SETTINGS - STANDALONE MODE ONLY
# These settings are ignored when the war file is deployed to a JEE server.
#---------------------------------------------------------
# Listen host/port and context path (for example / or /sonar). Default values are 0.0.0.0:9000/.
sonar.web.host:                           <%= node['sonar']['web_host'] %>
sonar.web.port:                           <%= node['sonar']['web_port'] %>
sonar.web.context:                        <%= node['sonar']['web_context'] %>

# Log HTTP requests. Deactivated by default.
#sonar.web.jettyRequestLogs: ../../logs/jetty-yyyy_mm_dd.request.log

# Apache mod_jk connector. Supported only in standalone mode. 
# Uncomment to activate AJP13 connector. 
#sonar.ajp13.port: 8009


#---------------------------------------------------------
# DATABASE
#
# IMPORTANT : the embedded database Derby is used by default. 
# It is recommended for tests only. Please use an other database
# for production environment (MySQL, Oracle, Postgresql, 
# SQLServer)
#
#---------------------------------------------------------

#----- Credentials
# Permissions to create tables and indexes must be granted to JDBC user.
# The schema must be created first.
sonar.jdbc.username:                       <%= node['sonar']['jdbc_username'] %>
sonar.jdbc.password:                       <%= node['sonar']['jdbc_password'] %>

#----- Embedded database Derby
# Note : it does accept connections from remote hosts, so the
# sonar server and the maven plugin must be executed on the same host.
  
# Comment the following lines to deactivate the default embedded database.
sonar.jdbc.url:                            <%= node['sonar']['jdbc_url'] %>
sonar.jdbc.driverClassName:                <%= node['sonar']['jdbc_driverClassName'] %>
sonar.jdbc.validationQuery:                <%= node['sonar']['jdbc_validationQuery'] %>

# directory containing Derby database files. By default it's the /data directory in the sonar installation.
#sonar.embeddedDatabase.dataDir:
# derby embedded database server listening port, defaults to 1527
#sonar.derby.drda.portNumber:               1527

# uncomment to accept connections from remote hosts. Ba default it only accepts localhost connections.
#sonar.derby.drda.host: 0.0.0.0

#----- MySQL 5.x/6.x
# Comment the embedded database and uncomment the following properties to use MySQL. The validation query is optional.
#sonar.jdbc.url:                            jdbc:mysql://localhost:3306/sonar?useUnicode=true&characterEncoding=utf8
#sonar.jdbc.driverClassName:                com.mysql.jdbc.Driver
#sonar.jdbc.validationQuery:                select 1


#----- Oracle 10g/11g
# To use Oracle database :
# - Copy the JDBC driver to extensions/jdbc-driver/oracle.
# - Comment the embedded database and uncomment the following properties. The validation query is optional.
#sonar.jdbc.url:                            jdbc:oracle:thin:@localhost/XE
#sonar.jdbc.driverClassName:                oracle.jdbc.driver.OracleDriver
#sonar.jdbc.validationQuery:                select 1 from dual

# Activate if more than one Sonar Oracle schemas on the data server (for example different versions installed).
# In that case, use the same property during maven analysis (-Dsonar.hibernate.default_schema=xxx)
#sonar.hibernate.default_schema:            sonar

#----- PostgreSQL 8.x, 9.x
# Uncomment the following properties to use PostgreSQL. The validation query is optional.
#sonar.jdbc.url:                            jdbc:postgresql://localhost/sonar
#sonar.jdbc.driverClassName:                org.postgresql.Driver
#sonar.jdbc.validationQuery:                select 1


#----- Microsoft SQLServer
# The Jtds open source driver is available in extensions/jdbc-driver/mssql. More details on http://jtds.sourceforge.net
# The validation query is optional.
#sonar.jdbc.url:                            jdbc:jtds:sqlserver://localhost;databaseName=SONAR;SelectMethod=Cursor
#sonar.jdbc.driverClassName:                net.sourceforge.jtds.jdbc.Driver
#sonar.jdbc.validationQuery:                select 1  


#----- Connection pool settings
sonar.jdbc.maxActive:                      10
sonar.jdbc.maxIdle:                        5
sonar.jdbc.minIdle:                        2
sonar.jdbc.maxWait:                        5000
sonar.jdbc.minEvictableIdleTimeMillis:     600000
sonar.jdbc.timeBetweenEvictionRunsMillis:  30000


#----- JDBC Datasource bounded to JNDI
# When sonar webapp is deployed into a JEE server, the JDBC datasource can be configured into the JEE server and registered into JNDI.
# In such a case Sonar uses this datasource to connect to database.
# If you activate this feature, then the properties starting with "sonar.jdbc." can be commented, except "sonar.jdbc.dialect".
# The JDBC driver must still be deployed into the directory /extensions/jdbc-driver.
#sonar.jdbc.jndiName:                       jdbc/sonar

# Values are : mysql, mssql, derby, oracle, postgresql
#sonar.jdbc.dialect=


#---------------------------------------------------------
# UPDATE CENTER
#---------------------------------------------------------

# The Update Center requires an internet connection to request http://update.sonarsource.org
# It is activated by default:
#sonar.updatecenter.activate=true

# HTTP proxy (default none)
#http.proxyHost=
#http.proxyPort=

# NT domain name if NTLM proxy is used
#http.auth.ntlm.domain=

# SOCKS proxy (default none)
#socksProxyHost=
#socksProxyPort=

# proxy authentication. The 2 following properties are used for HTTP and SOCKS proxies.
#http.proxyUser=
#http.proxyPassword=

# More options from Chef

<% if @options -%>
<%   @options.sort.map do | option, value | -%>
<%= option %>:	<%= value %>
<%   end -%>
<% end -%>
