# Java Additional Parameters
wrapper.java.additional.1=-Djava.awt.headless=true
wrapper.java.additional.2=-XX:MaxPermSize=<%= node['sonar']['java_maxpermsize'] %>
wrapper.java.additional.3=-XX:+HeapDumpOnOutOfMemoryError
wrapper.java.additional.4=-Dfile.encoding=UTF-8
wrapper.java.additional.5=-Djruby.management.enabled=false

# RECOMMENDED : uncomment if Java Virtual Machine is a JDK but not a JRE. To know which JVM you use, execute
# 'java -version'. JDK displays 'Server VM'.
<%- if node['sonar']['java_additional'] -%>
wrapper.java.additional.6=<%= node['sonar']['java_additional'] %>
<%- end -%>

# Initial Java Heap Size (in MB)
wrapper.java.initmemory=<%= node['sonar']['java_initmemory'] %>

# Maximum Java Heap Size (in MB)
wrapper.java.maxmemory=<%= node['sonar']['java_maxmemory'] %>

#********************************************************************
# Wrapper Java Properties
#********************************************************************
# JVM
# Can be an absolute path, for example:
#wrapper.java.command=/path/to/my/jdk/bin/java
wrapper.java.command=<%= node['sonar']['java_command'] %>

# Java Main class.  This class must implement the WrapperListener interface
#  or guarantee that the WrapperManager class is initialized.  Helper
#  classes are provided to do this for you.  See the Integration section
#  of the documentation for details.
wrapper.java.mainclass=org.tanukisoftware.wrapper.WrapperSimpleApp

# Java Classpath (include wrapper.jar)  Add class path elements as
#  needed starting from 1
wrapper.java.classpath.1=../../lib/*.jar
wrapper.java.classpath.2=../../conf
wrapper.java.classpath.3=../../extensions/jdbc-driver/h2/*.jar
wrapper.java.classpath.4=../../extensions/jdbc-driver/mysql/*.jar
wrapper.java.classpath.5=../../extensions/jdbc-driver/oracle/*.jar
wrapper.java.classpath.6=../../extensions/jdbc-driver/postgresql/*.jar
wrapper.java.classpath.7=../../extensions/jdbc-driver/mssql/*.jar

# Java Library Path (location of Wrapper.DLL or libwrapper.so)
wrapper.java.library.path.1=./lib

# Application parameters.  Add parameters as needed starting from 1
wrapper.app.parameter.1=org.sonar.application.StartServer

#********************************************************************
# Profiling and debbuging - for development only
# If wrapper.java.additional.6=-server is not commented, parameter ids should start from 7 instead of 6.
#********************************************************************
# Java remote debugging
#wrapper.java.additional.6=-agentlib:jdwp=transport=dt_socket,server=y,address=8000

# JMX remote monitoring on Sun JVM (warning, security is disabled)
#wrapper.java.additional.6=-Dcom.sun.management.jmxremote
#wrapper.java.additional.7=-Dcom.sun.management.jmxremote.port=9005
#wrapper.java.additional.8=-Dcom.sun.management.jmxremote.authenticate=false
#wrapper.java.additional.9=-Dcom.sun.management.jmxremote.ssl=false

#********************************************************************
# Wrapper Logging Properties
#********************************************************************
# Format of output for the console.  (See docs for formats)
wrapper.console.format=PM

# Log Level for console output.  (See docs for log levels)
wrapper.console.loglevel=INFO

# Log file to use for wrapper output logging.
wrapper.logfile=../../logs/sonar.log

# Format of output for the log file.  (See docs for formats)
wrapper.logfile.format=M

# Log Level for log file output.  (See docs for log levels)
wrapper.logfile.loglevel=INFO

# Maximum size that the log file will be allowed to grow to before
#  the log is rolled. Size is specified in bytes.  The default value
#  of 0, disables log rolling.  May abbreviate with the 'k' (kb) or
#  'm' (mb) suffix.  For example: 10m = 10 megabytes.
<%- if node['sonar']['logfile_maxsize'] -%>
wrapper.logfile.maxsize=<%= node['sonar']['logfile_maxsize'] %>
<%- end -%>

# Maximum number of rolled log files which will be allowed before old
#  files are deleted.  The default value of 0 implies no limit.
#wrapper.logfile.maxfiles=0

# Log Level for sys/event log output.  (See docs for log levels)
wrapper.syslog.loglevel=<%= node['sonar']['syslog_loglevel'] %>

#********************************************************************
# Wrapper Windows Properties
#********************************************************************
# Title to use when running as a console
wrapper.console.title=Sonar

# Disallow start of multiple instances of an application at the same time on Windows
wrapper.single_invocation=true

#********************************************************************
# Wrapper Windows NT/2000/XP Service Properties
#********************************************************************
# WARNING - Do not modify any of these properties when an application
#  using this configuration file has been installed as a service.
#  Please uninstall the service before modifying this section.  The
#  service can then be reinstalled.

# Name of the service
wrapper.ntservice.name=Sonar

# Display name of the service
wrapper.ntservice.displayname=Sonar

# Description of the service
wrapper.ntservice.description=Sonar

# Service dependencies.  Add dependencies as needed starting from 1
wrapper.ntservice.dependency.1=

# Mode in which the service is installed.  AUTO_START or DEMAND_START
wrapper.ntservice.starttype=AUTO_START

# Allow the service to interact with the desktop.
wrapper.ntservice.interactive=false

#********************************************************************
# restart the process if CPU is heavily loaded during 240 seconds.
wrapper.ping.timeout=240
